import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

// grab the AWS plugin
plugins {
    id 'jp.classmethod.aws.lambda' version '0.35'
    id 'java'
    id 'idea'
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

configurations {
    provided
    compile.extendsFrom provided
}

// In this section you declare the dependencies for your production and test code
dependencies {
    provided 'com.amazonaws:aws-lambda-java-core:1.1.0'
    compile 'software.amazon.awssdk:dynamodb:2.0.0-preview-7'
    compile 'com.mannanlive:btcmarkets-java:0.1'
    compile 'org.twitter4j:twitter4j-core:4.0.6'
    testCompile 'junit:junit:4.12'
}

jar {
    dependsOn configurations.runtime
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

aws {
    profileName = 'default'
    region = 'ap-southeast-2'
}

def doUpload(task, String name, String handler, String description = '', Map environment = [:]) {
    task.role = "arn:aws:iam::${aws.accountId}:role/lambda"
    task.zipFile = jar.archivePath
    task.memorySize = 256
    task.timeout = 60
    task.runtime = 'java8'
    task.functionName = name
    task.handler = "com.mannanlive.handler.${handler}::handleRequest"
    task.description = description
    task.environment = environment
}

// migrate or create the function to AWS
task migrateCryptoValue(type: AWSLambdaMigrateFunctionTask, dependsOn: jar) {
    doUpload delegate, 'get-crypto-value', 'MarketValueHandler', 'Get the current crypto market value.'
}

task migratePersistCryptoValue(type: AWSLambdaMigrateFunctionTask, dependsOn: jar) {
    doUpload delegate, 'crypto-value', 'PersistMarketValueHandler', 'Get all current crypto market value and save to DynamoDB.'
}

task migrateTwitter(type: AWSLambdaMigrateFunctionTask, dependsOn: jar) {
    Map environment = [
            consumerKey:       'key',
            consumerSecret:    'secret',
            accessToken:       'token',
            accessTokenSecret: 'tokenSecret'
    ]
    doUpload delegate, 'tweet-crypto-value', 'TweetHandler', 'Tweets the current crypto market value.', environment
}

task refreshAll << {
    println 'Migrated all tasks to AWS Lambda'
}

refreshAll.dependsOn {
    tasks.findAll { task -> task.name.startsWith('migrate') }
}
